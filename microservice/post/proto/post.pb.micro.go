// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/post.proto

package proto

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for PostService service

func NewPostServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for PostService service

type PostService interface {
	CreatePost(ctx context.Context, in *CreatePostRequest, opts ...client.CallOption) (*Response, error)
	GetPost(ctx context.Context, in *Request, opts ...client.CallOption) (*Post, error)
	ListMainPost(ctx context.Context, in *ListMainPostRequest, opts ...client.CallOption) (*ListPostResponse, error)
	ListUserCreatedPost(ctx context.Context, in *ListPostPartInfoRequest, opts ...client.CallOption) (*ListPostPartInfoResponse, error)
	UpdatePostInfo(ctx context.Context, in *UpdatePostInfoRequest, opts ...client.CallOption) (*Response, error)
	GetComment(ctx context.Context, in *Request, opts ...client.CallOption) (*CommentInfo, error)
	CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...client.CallOption) (*CreateCommentResponse, error)
	DeleteItem(ctx context.Context, in *DeleteItemRequest, opts ...client.CallOption) (*Response, error)
	CreateOrRemoveLike(ctx context.Context, in *LikeRequest, opts ...client.CallOption) (*Response, error)
	ListLikeByUserId(ctx context.Context, in *ListPostPartInfoRequest, opts ...client.CallOption) (*ListPostPartInfoResponse, error)
	ListPopularTag(ctx context.Context, in *ListPopularTagRequest, opts ...client.CallOption) (*Tags, error)
	CreateOrRemoveCollection(ctx context.Context, in *Request, opts ...client.CallOption) (*CreateCollectionResponse, error)
	ListCollection(ctx context.Context, in *ListPostPartInfoRequest, opts ...client.CallOption) (*ListPostPartInfoResponse, error)
	CreateReport(ctx context.Context, in *CreateReportRequest, opts ...client.CallOption) (*Response, error)
	ListReport(ctx context.Context, in *ListReportRequest, opts ...client.CallOption) (*ListReportResponse, error)
	HandleReport(ctx context.Context, in *HandleReportRequest, opts ...client.CallOption) (*Response, error)
}

type postService struct {
	c    client.Client
	name string
}

func NewPostService(name string, c client.Client) PostService {
	return &postService{
		c:    c,
		name: name,
	}
}

func (c *postService) CreatePost(ctx context.Context, in *CreatePostRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "PostService.CreatePost", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postService) GetPost(ctx context.Context, in *Request, opts ...client.CallOption) (*Post, error) {
	req := c.c.NewRequest(c.name, "PostService.GetPost", in)
	out := new(Post)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postService) ListMainPost(ctx context.Context, in *ListMainPostRequest, opts ...client.CallOption) (*ListPostResponse, error) {
	req := c.c.NewRequest(c.name, "PostService.ListMainPost", in)
	out := new(ListPostResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postService) ListUserCreatedPost(ctx context.Context, in *ListPostPartInfoRequest, opts ...client.CallOption) (*ListPostPartInfoResponse, error) {
	req := c.c.NewRequest(c.name, "PostService.ListUserCreatedPost", in)
	out := new(ListPostPartInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postService) UpdatePostInfo(ctx context.Context, in *UpdatePostInfoRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "PostService.UpdatePostInfo", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postService) GetComment(ctx context.Context, in *Request, opts ...client.CallOption) (*CommentInfo, error) {
	req := c.c.NewRequest(c.name, "PostService.GetComment", in)
	out := new(CommentInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postService) CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...client.CallOption) (*CreateCommentResponse, error) {
	req := c.c.NewRequest(c.name, "PostService.CreateComment", in)
	out := new(CreateCommentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postService) DeleteItem(ctx context.Context, in *DeleteItemRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "PostService.DeleteItem", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postService) CreateOrRemoveLike(ctx context.Context, in *LikeRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "PostService.CreateOrRemoveLike", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postService) ListLikeByUserId(ctx context.Context, in *ListPostPartInfoRequest, opts ...client.CallOption) (*ListPostPartInfoResponse, error) {
	req := c.c.NewRequest(c.name, "PostService.ListLikeByUserId", in)
	out := new(ListPostPartInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postService) ListPopularTag(ctx context.Context, in *ListPopularTagRequest, opts ...client.CallOption) (*Tags, error) {
	req := c.c.NewRequest(c.name, "PostService.ListPopularTag", in)
	out := new(Tags)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postService) CreateOrRemoveCollection(ctx context.Context, in *Request, opts ...client.CallOption) (*CreateCollectionResponse, error) {
	req := c.c.NewRequest(c.name, "PostService.CreateOrRemoveCollection", in)
	out := new(CreateCollectionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postService) ListCollection(ctx context.Context, in *ListPostPartInfoRequest, opts ...client.CallOption) (*ListPostPartInfoResponse, error) {
	req := c.c.NewRequest(c.name, "PostService.ListCollection", in)
	out := new(ListPostPartInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postService) CreateReport(ctx context.Context, in *CreateReportRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "PostService.CreateReport", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postService) ListReport(ctx context.Context, in *ListReportRequest, opts ...client.CallOption) (*ListReportResponse, error) {
	req := c.c.NewRequest(c.name, "PostService.ListReport", in)
	out := new(ListReportResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postService) HandleReport(ctx context.Context, in *HandleReportRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "PostService.HandleReport", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PostService service

type PostServiceHandler interface {
	CreatePost(context.Context, *CreatePostRequest, *Response) error
	GetPost(context.Context, *Request, *Post) error
	ListMainPost(context.Context, *ListMainPostRequest, *ListPostResponse) error
	ListUserCreatedPost(context.Context, *ListPostPartInfoRequest, *ListPostPartInfoResponse) error
	UpdatePostInfo(context.Context, *UpdatePostInfoRequest, *Response) error
	GetComment(context.Context, *Request, *CommentInfo) error
	CreateComment(context.Context, *CreateCommentRequest, *CreateCommentResponse) error
	DeleteItem(context.Context, *DeleteItemRequest, *Response) error
	CreateOrRemoveLike(context.Context, *LikeRequest, *Response) error
	ListLikeByUserId(context.Context, *ListPostPartInfoRequest, *ListPostPartInfoResponse) error
	ListPopularTag(context.Context, *ListPopularTagRequest, *Tags) error
	CreateOrRemoveCollection(context.Context, *Request, *CreateCollectionResponse) error
	ListCollection(context.Context, *ListPostPartInfoRequest, *ListPostPartInfoResponse) error
	CreateReport(context.Context, *CreateReportRequest, *Response) error
	ListReport(context.Context, *ListReportRequest, *ListReportResponse) error
	HandleReport(context.Context, *HandleReportRequest, *Response) error
}

func RegisterPostServiceHandler(s server.Server, hdlr PostServiceHandler, opts ...server.HandlerOption) error {
	type postService interface {
		CreatePost(ctx context.Context, in *CreatePostRequest, out *Response) error
		GetPost(ctx context.Context, in *Request, out *Post) error
		ListMainPost(ctx context.Context, in *ListMainPostRequest, out *ListPostResponse) error
		ListUserCreatedPost(ctx context.Context, in *ListPostPartInfoRequest, out *ListPostPartInfoResponse) error
		UpdatePostInfo(ctx context.Context, in *UpdatePostInfoRequest, out *Response) error
		GetComment(ctx context.Context, in *Request, out *CommentInfo) error
		CreateComment(ctx context.Context, in *CreateCommentRequest, out *CreateCommentResponse) error
		DeleteItem(ctx context.Context, in *DeleteItemRequest, out *Response) error
		CreateOrRemoveLike(ctx context.Context, in *LikeRequest, out *Response) error
		ListLikeByUserId(ctx context.Context, in *ListPostPartInfoRequest, out *ListPostPartInfoResponse) error
		ListPopularTag(ctx context.Context, in *ListPopularTagRequest, out *Tags) error
		CreateOrRemoveCollection(ctx context.Context, in *Request, out *CreateCollectionResponse) error
		ListCollection(ctx context.Context, in *ListPostPartInfoRequest, out *ListPostPartInfoResponse) error
		CreateReport(ctx context.Context, in *CreateReportRequest, out *Response) error
		ListReport(ctx context.Context, in *ListReportRequest, out *ListReportResponse) error
		HandleReport(ctx context.Context, in *HandleReportRequest, out *Response) error
	}
	type PostService struct {
		postService
	}
	h := &postServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&PostService{h}, opts...))
}

type postServiceHandler struct {
	PostServiceHandler
}

func (h *postServiceHandler) CreatePost(ctx context.Context, in *CreatePostRequest, out *Response) error {
	return h.PostServiceHandler.CreatePost(ctx, in, out)
}

func (h *postServiceHandler) GetPost(ctx context.Context, in *Request, out *Post) error {
	return h.PostServiceHandler.GetPost(ctx, in, out)
}

func (h *postServiceHandler) ListMainPost(ctx context.Context, in *ListMainPostRequest, out *ListPostResponse) error {
	return h.PostServiceHandler.ListMainPost(ctx, in, out)
}

func (h *postServiceHandler) ListUserCreatedPost(ctx context.Context, in *ListPostPartInfoRequest, out *ListPostPartInfoResponse) error {
	return h.PostServiceHandler.ListUserCreatedPost(ctx, in, out)
}

func (h *postServiceHandler) UpdatePostInfo(ctx context.Context, in *UpdatePostInfoRequest, out *Response) error {
	return h.PostServiceHandler.UpdatePostInfo(ctx, in, out)
}

func (h *postServiceHandler) GetComment(ctx context.Context, in *Request, out *CommentInfo) error {
	return h.PostServiceHandler.GetComment(ctx, in, out)
}

func (h *postServiceHandler) CreateComment(ctx context.Context, in *CreateCommentRequest, out *CreateCommentResponse) error {
	return h.PostServiceHandler.CreateComment(ctx, in, out)
}

func (h *postServiceHandler) DeleteItem(ctx context.Context, in *DeleteItemRequest, out *Response) error {
	return h.PostServiceHandler.DeleteItem(ctx, in, out)
}

func (h *postServiceHandler) CreateOrRemoveLike(ctx context.Context, in *LikeRequest, out *Response) error {
	return h.PostServiceHandler.CreateOrRemoveLike(ctx, in, out)
}

func (h *postServiceHandler) ListLikeByUserId(ctx context.Context, in *ListPostPartInfoRequest, out *ListPostPartInfoResponse) error {
	return h.PostServiceHandler.ListLikeByUserId(ctx, in, out)
}

func (h *postServiceHandler) ListPopularTag(ctx context.Context, in *ListPopularTagRequest, out *Tags) error {
	return h.PostServiceHandler.ListPopularTag(ctx, in, out)
}

func (h *postServiceHandler) CreateOrRemoveCollection(ctx context.Context, in *Request, out *CreateCollectionResponse) error {
	return h.PostServiceHandler.CreateOrRemoveCollection(ctx, in, out)
}

func (h *postServiceHandler) ListCollection(ctx context.Context, in *ListPostPartInfoRequest, out *ListPostPartInfoResponse) error {
	return h.PostServiceHandler.ListCollection(ctx, in, out)
}

func (h *postServiceHandler) CreateReport(ctx context.Context, in *CreateReportRequest, out *Response) error {
	return h.PostServiceHandler.CreateReport(ctx, in, out)
}

func (h *postServiceHandler) ListReport(ctx context.Context, in *ListReportRequest, out *ListReportResponse) error {
	return h.PostServiceHandler.ListReport(ctx, in, out)
}

func (h *postServiceHandler) HandleReport(ctx context.Context, in *HandleReportRequest, out *Response) error {
	return h.PostServiceHandler.HandleReport(ctx, in, out)
}
