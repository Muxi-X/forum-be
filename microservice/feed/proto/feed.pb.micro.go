// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/feed.proto

package proto

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for FeedService service

func NewFeedServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for FeedService service

type FeedService interface {
	Push(ctx context.Context, in *PushRequest, opts ...client.CallOption) (*Response, error)
	List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error)
	Delete(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
}

type feedService struct {
	c    client.Client
	name string
}

func NewFeedService(name string, c client.Client) FeedService {
	return &feedService{
		c:    c,
		name: name,
	}
}

func (c *feedService) Push(ctx context.Context, in *PushRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "FeedService.Push", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedService) List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error) {
	req := c.c.NewRequest(c.name, "FeedService.List", in)
	out := new(ListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedService) Delete(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "FeedService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FeedService service

type FeedServiceHandler interface {
	Push(context.Context, *PushRequest, *Response) error
	List(context.Context, *ListRequest, *ListResponse) error
	Delete(context.Context, *Request, *Response) error
}

func RegisterFeedServiceHandler(s server.Server, hdlr FeedServiceHandler, opts ...server.HandlerOption) error {
	type feedService interface {
		Push(ctx context.Context, in *PushRequest, out *Response) error
		List(ctx context.Context, in *ListRequest, out *ListResponse) error
		Delete(ctx context.Context, in *Request, out *Response) error
	}
	type FeedService struct {
		feedService
	}
	h := &feedServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&FeedService{h}, opts...))
}

type feedServiceHandler struct {
	FeedServiceHandler
}

func (h *feedServiceHandler) Push(ctx context.Context, in *PushRequest, out *Response) error {
	return h.FeedServiceHandler.Push(ctx, in, out)
}

func (h *feedServiceHandler) List(ctx context.Context, in *ListRequest, out *ListResponse) error {
	return h.FeedServiceHandler.List(ctx, in, out)
}

func (h *feedServiceHandler) Delete(ctx context.Context, in *Request, out *Response) error {
	return h.FeedServiceHandler.Delete(ctx, in, out)
}
